use uuid::Uuid;
use chrono::naive::NaiveDate;

use crate::schema::work;

#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Contribution_type"]
pub enum ContributionType {
    Author,
    Editor,
    Translator,
    Photographer,
    Ilustrator,
    #[db_rename = "foreword-by"]
    ForewordBy,
    #[db_rename = "introduction-by"]
    IntroductionBy,
    #[db_rename = "afterword-by"]
    AfterwordBy,
    #[db_rename = "preface-by"]
    PrefaceBy,
}

#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Work_type"]
pub enum WorkType {
    #[db_rename = "book-chapter"]
    BookChapter,
    Monograph,
    #[db_rename = "edited-book"]
    EditedBook,
    Textbook,
    #[db_rename = "journal-issue"]
    JournalIssue,
    #[db_rename = "book-set"]
    BookSet,
}

#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Series_type"]
pub enum SeriesType {
    Journal,
    #[db_rename = "book-series"]
    BookSeries,
}

#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Publication_type"]
pub enum PublicationType {
    #[db_rename = "Paperback"]
    Paperback,
    #[db_rename = "Hardback"]
    Hardback,
    #[db_rename = "PDF"]
    PDF,
    #[db_rename = "HTML"]
    HTML,
    #[db_rename = "XML"]
    XML,
    #[db_rename = "Epub"]
    Epub,
    #[db_rename = "Mobi"]
    Mobi,
}

#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Language_relation"]
pub enum LanguageRelation {
    Original,
    #[db_rename = "translated-from"]
    TranslatedFrom,
    #[db_rename = "translated-into"]
    TranslatedInto,
}

#[derive(Queryable)]
pub struct Work {
    pub work_id: Uuid,
    pub work_type: WorkType,
    pub full_title: String,
    pub title: String,
    pub subtitle: Option<String>,
    pub publisher_id: Uuid,
    pub doi: Option<String>,
    pub publication_date: Option<NaiveDate>,
}

#[derive(juniper::GraphQLInputObject, Insertable)]
#[table_name = "work"]
pub struct NewWork {
    pub work_id: Uuid,
    pub work_type: WorkType,
    pub full_title: String,
    pub title: String,
    pub subtitle: Option<String>,
    pub publisher_id: Uuid,
    pub doi: Option<String>,
    pub publication_date: Option<NaiveDate>,
}

#[derive(Queryable)]
pub struct Language {
    pub language_id: Uuid,
    pub work_id: Uuid,
    pub language_code: LanguageCode,
    pub language_relation: LanguageRelation,
    pub main_language: bool,
}

#[derive(Queryable)]
pub struct Series {
    pub series_id: Uuid,
    pub series_type: SeriesType,
    pub series_name: String,
    pub issn_print: String,
    pub issn_digital: String,
    pub series_url: Option<String>,
    pub publisher_id: Uuid,
}

#[derive(Queryable)]
pub struct Issue {
    pub series_id: Uuid,
    pub work_id: Uuid,
    pub issue_ordinal: i32,
}

#[derive(Queryable)]
pub struct Publication {
    pub publication_id: Uuid,
    pub publication_type: PublicationType,
    pub work_id: Uuid,
    pub isbn: Option<String>,
    pub publication_url: Option<String>,
}

#[derive(Queryable)]
pub struct Publisher {
    pub publisher_id: Uuid,
    pub publisher_name: String,
    pub publisher_shortname: Option<String>,
    pub publisher_url: Option<String>,
}

#[derive(Queryable)]
pub struct Contributor {
    pub contributor_id: Uuid,
    pub first_name: Option<String>,
    pub last_name: String,
    pub full_name: String,
    pub orcid: Option<String>,
    pub website: Option<String>,
}

#[derive(Queryable)]
pub struct Contribution {
    pub work_id: Uuid,
    pub contributor_id: Uuid,
    pub contribution_type: ContributionType,
    pub main_contribution: bool,
    pub biography: Option<String>,
    pub institution: Option<String>,
}


#[derive(Debug, PartialEq, DbEnum)]
#[derive(juniper::GraphQLEnum)]
#[DieselType = "Language_code"]
pub enum LanguageCode {
  Aar,
  Abk,
  Ace,
  Ach,
  Ada,
  Ady,
  Afa,
  Afh,
  Afr,
  Ain,
  Aka,
  Akk,
  Alb,
  Ale,
  Alg,
  Alt,
  Amh,
  Ang,
  Anp,
  Apa,
  Ara,
  Arc,
  Arg,
  Arm,
  Arn,
  Arp,
  Art,
  Arw,
  Asm,
  Ast,
  Ath,
  Aus,
  Ava,
  Ave,
  Awa,
  Aym,
  Aze,
  Bad,
  Bai,
  Bak,
  Bal,
  Bam,
  Ban,
  Baq,
  Bas,
  Bat,
  Bej,
  Bel,
  Bem,
  Ben,
  Ber,
  Bho,
  Bih,
  Bik,
  Bin,
  Bis,
  Bla,
  Bnt,
  Bos,
  Bra,
  Bre,
  Btk,
  Bua,
  Bug,
  Bul,
  Bur,
  Byn,
  Cad,
  Cai,
  Car,
  Cat,
  Cau,
  Ceb,
  Cel,
  Cha,
  Chb,
  Che,
  Chg,
  Chi,
  Chk,
  Chm,
  Chn,
  Cho,
  Chp,
  Chr,
  Chu,
  Chv,
  Chy,
  Cmc,
  Cnr,
  Cop,
  Cor,
  Cos,
  Cpe,
  Cpf,
  Cpp,
  Cre,
  Crh,
  Crp,
  Csb,
  Cus,
  Cze,
  Dak,
  Dan,
  Dar,
  Day,
  Del,
  Den,
  Dgr,
  Din,
  Div,
  Doi,
  Dra,
  Dsb,
  Dua,
  Dum,
  Dut,
  Dyu,
  Dzo,
  Efi,
  Egy,
  Eka,
  Elx,
  Eng,
  Enm,
  Epo,
  Est,
  Ewe,
  Ewo,
  Fan,
  Fao,
  Fat,
  Fij,
  Fil,
  Fin,
  Fiu,
  Fon,
  Fre,
  Frm,
  Fro,
  Frr,
  Frs,
  Fry,
  Ful,
  Fur,
  Gaa,
  Gay,
  Gba,
  Gem,
  Geo,
  Ger,
  Gez,
  Gil,
  Gla,
  Gle,
  Glg,
  Glv,
  Gmh,
  Goh,
  Gon,
  Gor,
  Got,
  Grb,
  Grc,
  Gre,
  Grn,
  Gsw,
  Guj,
  Gwi,
  Hai,
  Hat,
  Hau,
  Haw,
  Heb,
  Her,
  Hil,
  Him,
  Hin,
  Hit,
  Hmn,
  Hmo,
  Hrv,
  Hsb,
  Hun,
  Hup,
  Iba,
  Ibo,
  Ice,
  Ido,
  Iii,
  Ijo,
  Iku,
  Ile,
  Ilo,
  Ina,
  Inc,
  Ind,
  Ine,
  Inh,
  Ipk,
  Ira,
  Iro,
  Ita,
  Jav,
  Jbo,
  Jpn,
  Jpr,
  Jrb,
  Kaa,
  Kab,
  Kac,
  Kal,
  Kam,
  Kan,
  Kar,
  Kas,
  Kau,
  Kaw,
  Kaz,
  Kbd,
  Kha,
  Khi,
  Khm,
  Kho,
  Kik,
  Kin,
  Kir,
  Kmb,
  Kok,
  Kom,
  Kon,
  Kor,
  Kos,
  Kpe,
  Krc,
  Krl,
  Kro,
  Kru,
  Kua,
  Kum,
  Kur,
  Kut,
  Lad,
  Lah,
  Lam,
  Lao,
  Lat,
  Lav,
  Lez,
  Lim,
  Lin,
  Lit,
  Lol,
  Loz,
  Ltz,
  Lua,
  Lub,
  Lug,
  Lui,
  Lun,
  Luo,
  Lus,
  Mac,
  Mad,
  Mag,
  Mah,
  Mai,
  Mak,
  Mal,
  Man,
  Mao,
  Map,
  Mar,
  Mas,
  May,
  Mdf,
  Mdr,
  Men,
  Mga,
  Mic,
  Min,
  Mis,
  Mkh,
  Mlg,
  Mlt,
  Mnc,
  Mni,
  Mno,
  Moh,
  Mon,
  Mos,
  Mul,
  Mun,
  Mus,
  Mwl,
  Mwr,
  Myn,
  Myv,
  Nah,
  Nai,
  Nap,
  Nau,
  Nav,
  Nbl,
  Nde,
  Ndo,
  Nds,
  Nep,
  New,
  Nia,
  Nic,
  Niu,
  Nno,
  Nob,
  Nog,
  Non,
  Nor,
  Nqo,
  Nso,
  Nub,
  Nwc,
  Nya,
  Nym,
  Nyn,
  Nyo,
  Nzi,
  Oci,
  Oji,
  Ori,
  Orm,
  Osa,
  Oss,
  Ota,
  Oto,
  Paa,
  Pag,
  Pal,
  Pam,
  Pan,
  Pap,
  Pau,
  Peo,
  Per,
  Phi,
  Phn,
  Pli,
  Pol,
  Pon,
  Por,
  Pra,
  Pro,
  Pus,
  Qaa,
  Que,
  Raj,
  Rap,
  Rar,
  Roa,
  Roh,
  Rom,
  Rum,
  Run,
  Rup,
  Rus,
  Sad,
  Sag,
  Sah,
  Sai,
  Sal,
  Sam,
  San,
  Sas,
  Sat,
  Scn,
  Sco,
  Sel,
  Sem,
  Sga,
  Sgn,
  Shn,
  Sid,
  Sin,
  Sio,
  Sit,
  Sla,
  Slo,
  Slv,
  Sma,
  Sme,
  Smi,
  Smj,
  Smn,
  Smo,
  Sms,
  Sna,
  Snd,
  Snk,
  Sog,
  Som,
  Son,
  Sot,
  Spa,
  Srd,
  Srn,
  Srp,
  Srr,
  Ssa,
  Ssw,
  Suk,
  Sun,
  Sus,
  Sux,
  Swa,
  Swe,
  Syc,
  Syr,
  Tah,
  Tai,
  Tam,
  Tat,
  Tel,
  Tem,
  Ter,
  Tet,
  Tgk,
  Tgl,
  Tha,
  Tib,
  Tig,
  Tir,
  Tiv,
  Tkl,
  Tlh,
  Tli,
  Tmh,
  Tog,
  Ton,
  Tpi,
  Tsi,
  Tsn,
  Tso,
  Tuk,
  Tum,
  Tup,
  Tur,
  Tut,
  Tvl,
  Twi,
  Tyv,
  Udm,
  Uga,
  Uig,
  Ukr,
  Umb,
  Und,
  Urd,
  Uzb,
  Vai,
  Ven,
  Vie,
  Vol,
  Vot,
  Wak,
  Wal,
  War,
  Was,
  Wel,
  Wen,
  Wln,
  Wol,
  Xal,
  Xho,
  Yao,
  Yap,
  Yid,
  Yor,
  Ypk,
  Zap,
  Zbl,
  Zen,
  Zgh,
  Zha,
  Znd,
  Zul,
  Zun,
  Zxx,
  Zza,
}
